import os
import requests
import logging
import asyncio

from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder, CommandHandler, MessageHandler,
    ContextTypes, filters
)

# üîê –ö–õ–Æ–ß–ò –ò –ù–ê–°–¢–†–û–ô–ö–ò
TELEGRAM_TOKEN = os.getenv("TELEGRAM_TOKEN") or '7253845822:AAGltWcYaaXVvr4Pb95pP6lXh8lYfZInoI4'
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY") or 'AIzaSyA6xHo-SD3jRybAiQt7CHxWgIpWWZrllhw'
REPLICATE_API_TOKEN = os.getenv("REPLICATE_API_TOKEN") or 'r8_HIB3ha4Vfn7v21xSimfapnYVt5QoAsP3REp0l'
GEMINI_API_URL = f"https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}"
ADMIN_ID = 1543197217  # üëà –£–∫–∞–∂–∏ —Å–≤–æ–π Telegram user ID

logging.basicConfig(level=logging.INFO)

# üìú –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    await update.message.reply_text(
        f"üëã –ü—Ä–∏–≤–µ—Ç, <b>{user.first_name}</b>!\n"
        f"–Ø –±–æ—Ç –Ω–∞ –±–∞–∑–µ Google Gemini ü§ñ\n"
        f"–ù–∞–ø–∏—à–∏ –≤–æ–ø—Ä–æ—Å ‚Äî –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        f"üí° –ö–æ–º–∞–Ω–¥—ã:\n"
        f"/img <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É\n"
        f"/history ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ –∑–∞–ø—Ä–æ—Å—ã\n/help ‚Äî –ø–æ–º–æ—â—å",
        parse_mode="HTML"
    )

    # üîî –ê–¥–º–∏–Ω—É —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
    if user.id != ADMIN_ID:
        text = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:\nID: <code>{user.id}</code>\n–ò–º—è: {user.full_name}"
        await context.bot.send_message(chat_id=ADMIN_ID, text=text, parse_mode="HTML")

# üìú –ö–æ–º–∞–Ω–¥–∞ /help
async def help_cmd(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùì –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start ‚Äî –Ω–∞—á–∞–ª–æ\n"
        "/img <–æ–ø–∏—Å–∞–Ω–∏–µ> ‚Äî –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è\n"
        "/history ‚Äî –∏—Å—Ç–æ—Ä–∏—è —Å–æ–æ–±—â–µ–Ω–∏–π\n"
        "/set_ad <—Ç–µ–∫—Å—Ç> ‚Äî —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)",
        parse_mode="HTML"
    )

# üßæ –ö–æ–º–∞–Ω–¥–∞ /set_ad
async def set_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        return await update.message.reply_text("üö´ –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤.")
    ad_text = ' '.join(context.args)
    context.application.bot_data['ad'] = f"<i>{ad_text}</i>"
    await update.message.reply_text("‚úÖ –†–µ–∫–ª–∞–º–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")

# üïò –ò—Å—Ç–æ—Ä–∏—è
async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hist = context.user_data.get("history", [])
    if not hist:
        return await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
    text = "<b>üïò –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è:</b>\n"
    for i, pair in enumerate(hist[-5:], 1):
        text += f"\n<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {pair['–≤–æ–ø—Ä–æ—Å']}\n<b>–û—Ç–≤–µ—Ç:</b> {pair['–æ—Ç–≤–µ—Ç']}\n"
    await update.message.reply_text(text, parse_mode='HTML')

# üß† Gemini —Ç–µ–∫—Å—Ç–æ–≤–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è
async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat = update.message.chat
    await chat.send_action(action="typing")
    loading_msg = await update.message.reply_text("‚è≥ –î—É–º–∞—é...")

    payload = {"contents": [{"parts": [{"text": user_text}]}]}
    headers = {"Content-Type": "application/json"}
    try:
        r = requests.post(GEMINI_API_URL, headers=headers, json=payload)
        r.raise_for_status()
        data = r.json()
        answer = data["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

    # üí¨ –†–µ–∫–ª–∞–º–∞
    ad = context.application.bot_data.get("ad", "<i>ü§ù –°–æ—Ç—Ä—É–¥–Ω–∏—á–µ—Å—Ç–≤–æ? –ù–∞–ø–∏—à–∏ –∞–¥–º–∏–Ω—É!</i>")
    final = f"üí° <b>–û—Ç–≤–µ—Ç Gemini:</b>\n\n{answer}\n\n‚Äî\n{ad}"

    # üíæ –ò—Å—Ç–æ—Ä–∏—è
    context.user_data.setdefault("history", []).append({
        "–≤–æ–ø—Ä–æ—Å": user_text, "–æ—Ç–≤–µ—Ç": answer
    })
    await loading_msg.edit_text(final, parse_mode="HTML")

# üé® –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
async def generate_image(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if not context.args:
        return await update.message.reply_text("üì∏ –ò—Å–ø–æ–ª—å–∑—É–π: /img <–æ–ø–∏—Å–∞–Ω–∏–µ>")

    prompt = ' '.join(context.args)
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ...")

    try:
        # –ó–∞–ø—Ä–æ—Å –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é
        url = "https://api.replicate.com/v1/predictions"
        headers = {
            "Authorization": f"Token {REPLICATE_API_TOKEN}",
            "Content-Type": "application/json"
        }
        data = {
            "version": "c508bf47b6f97ec2c7db06670188b54c46e55a679fa2f0c27e30dfbde67478b0",
            "input": {"prompt": prompt}
        }
        r = requests.post(url, headers=headers, json=data)
        r.raise_for_status()
        prediction = r.json()
        status_url = prediction["urls"]["get"]

        # –û–∂–∏–¥–∞–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        while True:
            res = requests.get(status_url, headers=headers).json()
            if res["status"] == "succeeded":
                image_url = res["output"][0]
                break
            elif res["status"] == "failed":
                raise Exception("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–µ —É–¥–∞–ª–∞—Å—å.")
            await asyncio.sleep(1)

        await update.message.reply_photo(photo=image_url, caption="‚ú® –í–æ—Ç —Ç–≤–æ—ë –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ!")
    except Exception as e:
        await update.message.reply_text(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}")

# ‚ñ∂Ô∏è –ó–∞–ø—É—Å–∫
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('help', help_cmd))
    app.add_handler(CommandHandler('set_ad', set_ad))
    app.add_handler(CommandHandler('history', history))
    app.add_handler(CommandHandler('img', generate_image))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    # ‚öôÔ∏è –ö–Ω–æ–ø–∫–∏ –∞–≤—Ç–æ–ø–æ–¥—Å–∫–∞–∑–∫–∏
    await app.bot.set_my_commands([
        BotCommand("start", "–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"),
        BotCommand("img", "–°–æ–∑–¥–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø–æ –æ–ø–∏—Å–∞–Ω–∏—é"),
        BotCommand("history", "–ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤"),
        BotCommand("set_ad", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É"),
        BotCommand("help", "–ü–æ–º–æ—â—å"),
    ])

    print("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
    await app.run_polling()

# üöÄ –ó–∞–ø—É—Å–∫
if __name__ == '__main__':
    asyncio.run(main())
