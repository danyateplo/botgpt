import requests
from telegram import Update, BotCommand
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
    CallbackContext,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
TELEGRAM_TOKEN = '8140231133:AAHua40lJeqAiGiTlUMTDDsIAukm4iueggE'
GEMINI_API_KEY = 'AIzaSyA6xHo-SD3jRybAiQt7CHxWgIpWWZrllhw'
GEMINI_API_URL = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}'
ADMIN_ID = 1543197217  # –¢–≤–æ–π Telegram ID –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ ---
known_users = set()

# --- –ö–æ–º–∞–Ω–¥—ã ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id not in known_users:
        known_users.add(user_id)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º –∞–¥–º–∏–Ω–∞ –æ –Ω–æ–≤–æ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
        await context.bot.send_message(
            ADMIN_ID,
            f"üÜï –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {update.effective_user.full_name} (ID: {user_id})"
        )
    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é <b>Gemini 2.0</b> –æ—Ç Google.\n"
        "–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π –º–Ω–µ –≤–æ–ø—Ä–æ—Å ‚Äî –∏ –ø–æ–ª—É—á–∏—à—å –æ—Ç–≤–µ—Ç!",
        parse_mode='HTML'
    )

async def set_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("‚õî –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    ad_text = ' '.join(context.args)
    context.application.bot_data['ad'] = ad_text
    await update.message.reply_text("‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hist = context.user_data.get("history", [])
    if not hist:
        await update.message.reply_text("üï≥ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    reply = "<b>–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):</b>\n"
    for i, pair in enumerate(hist[-5:], 1):
        reply += f"\n<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {pair['–≤–æ–ø—Ä–æ—Å']}\n<b>–û—Ç–≤–µ—Ç:</b> {pair['–æ—Ç–≤–µ—Ç']}\n"
    await update.message.reply_text(reply, parse_mode='HTML')

# --- –û—Å–Ω–æ–≤–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π ---
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat = update.message.chat

    # "–ü–µ—á–∞—Ç–∞–µ—Ç..."
    await chat.send_action(action="typing")

    # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    loading_msg = await update.message.reply_text("‚öô –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    # –ó–∞–ø—Ä–æ—Å –∫ Gemini API
    payload = {
        "contents": [
            {
                "parts": [{"text": user_text}]
            }
        ]
    }
    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(GEMINI_API_URL, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        answer = data["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        answer = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

    # –†–µ–∫–ª–∞–º–∞ –∫—É—Ä—Å–∏–≤–æ–º
    ad = context.application.bot_data.get("ad", "<i>–ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞</i>")

    final_text = f"üí° <b>–û—Ç–≤–µ—Ç Gemini:</b>\n\n{answer}\n\n‚Äî\n{ad}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if "history" not in context.user_data:
        context.user_data["history"] = []
    context.user_data["history"].append({"–≤–æ–ø—Ä–æ—Å": user_text, "–æ—Ç–≤–µ—Ç": answer})

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –æ—Ç–≤–µ—Ç–æ–º –∏ —Ä–µ–∫–ª–∞–º–æ–π
    await loading_msg.edit_text(final_text, parse_mode='HTML')

# --- –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∫–æ–º–∞–Ω–¥ –¥–ª—è –∞–≤—Ç–æ–∫–æ–º–ø–ª–∏—Ç–∞ –≤ Telegram ---
async def set_commands(application):
    commands = [
        BotCommand("start", "–ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞"),
        BotCommand("history", "–ü–æ–∫–∞–∑–∞—Ç—å –∏—Å—Ç–æ—Ä–∏—é"),
        BotCommand("set_ad", "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É (–∞–¥–º–∏–Ω)"),
    ]
    await application.bot.set_my_commands(commands)

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    await set_commands(app)

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set_ad", set_ad))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()

if __name__ == "__main__":
    import asyncio
    asyncio.run(main())
