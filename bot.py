
import asyncio
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.constants import ChatAction
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    CallbackQueryHandler,
    filters,
)


# --- –ö–æ–Ω—Ñ–∏–≥–∏ ---
TELEGRAM_TOKEN = '7253845822:AAGltWcYaaXVvr4Pb95pP6lXh8lYfZInoI4'
GEMINI_API_KEY = 'AIzaSyA6xHo-SD3jRybAiQt7CHxWgIpWWZrllhw'
GEMINI_API_URL = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}'
ADMIN_ID = 1543197217  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
STABLE_DIFFUSION_API = "https://stablediffusionapi.com/api/v3/text2img"  # –ø—Ä–∏–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ API (–∑–∞–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ)
STABLE_DIFFUSION_API_KEY = "fVXd0fX5bbKI5UihmUBFBGb2cqYFbfyK8djYn7xY11cDovQRQ891MjISNm5x"

# --- –£—Ç–∏–ª–∏—Ç—ã ---

async def notify_admin_about_new_user(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_name = update.effective_user.full_name
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –±—ã–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ
    known_users = context.application.bot_data.setdefault("known_users", set())
    if user_id not in known_users:
        known_users.add(user_id)
        msg = f"üë§ –ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: <b>{user_name}</b> (ID: {user_id})"
        await context.bot.send_message(chat_id=ADMIN_ID, text=msg, parse_mode='HTML')

# --- –¢–µ–∫—Å—Ç–æ–≤—ã–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await notify_admin_about_new_user(update, context)

    keyboard = [
        [InlineKeyboardButton("/history", callback_data='history')],
        [InlineKeyboardButton("/set_ad", callback_data='set_ad')],
        [InlineKeyboardButton("/img", callback_data='img')]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é <b>Gemini 2.0</b> –æ—Ç Google.\n"
        "üì© –ü—Ä–æ—Å—Ç–æ –æ—Ç–ø—Ä–∞–≤—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å, –∏ —è –æ—Ç–≤–µ—á—É!\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –¥–ª—è –∫–æ–º–∞–Ω–¥:",
        parse_mode='HTML',
        reply_markup=reply_markup,
    )


async def set_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if user_id != ADMIN_ID:
        await update.message.reply_text("‚ùå –£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    ad_text = ' '.join(context.args)
    if not ad_text:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /set_ad <—Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã>")
        return
    context.application.bot_data['ad'] = ad_text
    await update.message.reply_text("‚úÖ –†–µ–∫–ª–∞–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")


async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hist = context.user_data.get("history", [])
    if not hist:
        await update.message.reply_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    reply = "<b>üïò –¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤):</b>\n"
    for i, pair in enumerate(hist[-5:], 1):
        reply += f"\n<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {pair['–≤–æ–ø—Ä–æ—Å']}\n<b>–û—Ç–≤–µ—Ç:</b> {pair['–æ—Ç–≤–µ—Ç']}\n"
    await update.message.reply_text(reply, parse_mode='HTML')


async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat = update.message.chat

    # –ü–∏—à–µ–º —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç..."
    await chat.send_action(ChatAction.TYPING)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
    loading_msg = await update.message.reply_text("‚åõ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    # –ó–∞–ø—Ä–æ—Å –∫ Gemini API
    payload = {
        "contents": [
            {"parts": [{"text": user_text}]}
        ]
    }
    headers = {"Content-Type": "application/json"}

    try:
        response = requests.post(GEMINI_API_URL, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        answer = data["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        answer = f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ: {e}"

    # –†–µ–∫–ª–∞–º–∞ –∫—É—Ä—Å–∏–≤–æ–º
    ad = context.application.bot_data.get("ad", "<i>–ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞ üòä</i>")
    final_text = f"üí° <b>–û—Ç–≤–µ—Ç Gemini:</b>\n\n{answer}\n\n‚Äî\n{ad}"

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏—Å—Ç–æ—Ä–∏—é
    if "history" not in context.user_data:
        context.user_data["history"] = []
    context.user_data["history"].append({"–≤–æ–ø—Ä–æ—Å": user_text, "–æ—Ç–≤–µ—Ç": answer})

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    await loading_msg.edit_text(final_text, parse_mode='HTML')


# --- –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π ---

async def generate_image(prompt: str) -> str:
    # –ó–¥–µ—Å—å –ø—Ä–∏–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞ –∫ –±–µ—Å–ø–ª–∞—Ç–Ω–æ–º—É API stable diffusion (–º–æ–∂–µ—à—å –∑–∞–º–µ–Ω–∏—Ç—å)
    try:
        payload = {
            "key": STABLE_DIFFUSION_API_KEY,
            "prompt": prompt,
            "negative_prompt": "blurry, lowres, bad anatomy",
            "width": 512,
            "height": 512,
            "samples": 1,
            "num_inference_steps": 20,
            "seed": None,
        }
        response = requests.post(STABLE_DIFFUSION_API, json=payload)
        response.raise_for_status()
        data = response.json()
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º URL –ø–µ—Ä–≤–æ–≥–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        return data["output"][0]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è: {e}"


async def img_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    args = context.args
    if not args:
        await update.message.reply_text("‚ùó –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /img <—Ç–µ–∫—Å—Ç –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>")
        return
    prompt = ' '.join(args)
    await update.message.reply_text("üé® –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ, –ø–æ–¥–æ–∂–¥–∏...")

    url_or_error = await generate_image(prompt)
    if url_or_error.startswith("–û—à–∏–±–∫–∞"):
        await update.message.reply_text(url_or_error)
    else:
        await update.message.reply_photo(photo=url_or_error, caption=f"üñºÔ∏è –†–µ–∑—É–ª—å—Ç–∞—Ç –¥–ª—è: {prompt}")


# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ inline –∫–Ω–æ–ø–æ–∫ (–ø—Ä–∏–º–µ—Ä) ---

async def button_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    data = query.data

    if data == "history":
        hist = context.user_data.get("history", [])
        if not hist:
            await query.edit_message_text("üì≠ –ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
            return
        reply = "<b>üïò –í–∞—à–∞ –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –∑–∞–ø—Ä–æ—Å–æ–≤):</b>\n"
        for i, pair in enumerate(hist[-5:], 1):
            reply += f"\n<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {pair['–≤–æ–ø—Ä–æ—Å']}\n<b>–û—Ç–≤–µ—Ç:</b> {pair['–æ—Ç–≤–µ—Ç']}\n"
        await query.edit_message_text(reply, parse_mode='HTML')
    elif data == "set_ad":
        await query.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /set_ad <—Ç–µ–∫—Å—Ç —Ä–µ–∫–ª–∞–º—ã> –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ä–µ–∫–ª–∞–º—ã (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞).")
    elif data == "img":
        await query.edit_message_text("–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /img <—Ç–µ–∫—Å—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è>.")


# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

async def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CommandHandler("set_ad", set_ad))
    app.add_handler(CommandHandler("history", history))
    app.add_handler(CommandHandler("img", img_command))

    app.add_handler(MessageHandler(filters.TEXT & (~filters.COMMAND), handle_message))
    app.add_handler(CallbackQueryHandler(button_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    await app.run_polling()


if __name__ == "__main__":
    try:
        loop = asyncio.get_event_loop()
        if loop.is_running():
            loop.create_task(main())
        else:
            loop.run_until_complete(main())
    except RuntimeError:
        asyncio.run(main())
