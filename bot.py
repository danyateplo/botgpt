import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    ContextTypes,
    filters,
)

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---

TELEGRAM_TOKEN = '7253845822:AAGltWcYaaXVvr4Pb95pP6lXh8lYfZInoI4'
GEMINI_API_KEY = 'AIzaSyA6xHo-SD3jRybAiQt7CHxWgIpWWZrllhw'
GEMINI_API_URL = f'https://generativelanguage.googleapis.com/v1beta/models/gemini-2.0-flash:generateContent?key={GEMINI_API_KEY}'
ADMIN_ID = 1543197217  # ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –¥–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
STABLE_DIFFUSION_URL = "https://stablediffusionapi.com/api/v3/text2img"  # –ø—Ä–∏–º–µ—Ä –±–µ—Å–ø–ª–∞—Ç–Ω–æ–≥–æ API (–∑–∞–º–µ–Ω–∏, –µ—Å–ª–∏ –Ω–∞–¥–æ)
STABLE_DIFFUSION_API_KEY = "fVXd0fX5bbKI5UihmUBFBGb2cqYFbfyK8djYn7xY11cDovQRQ891MjISNm5x"

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —á–µ—Ä–µ–∑ Gemini ---
def generate_gemini_text(prompt: str) -> str:
    payload = {
        "contents": [
            {
                "parts": [{"text": prompt}]
            }
        ]
    }
    headers = {"Content-Type": "application/json"}
    try:
        response = requests.post(GEMINI_API_URL, headers=headers, json=payload)
        response.raise_for_status()
        data = response.json()
        return data["candidates"][0]["content"]["parts"][0]["text"]
    except Exception as e:
        return f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ Gemini: {e}"

# --- –§—É–Ω–∫—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —á–µ—Ä–µ–∑ Stable Diffusion ---
def generate_image(prompt: str) -> str | None:
    payload = {
        "key": STABLE_DIFFUSION_API_KEY,
        "prompt": prompt,
        "negative_prompt": "blurry, low quality, bad anatomy",
        "width": "512",
        "height": "512",
        "samples": "1",
        "num_inference_steps": "30",
        "seed": None,
        "guidance_scale": 7.5,
    }
    try:
        resp = requests.post(STABLE_DIFFUSION_URL, json=payload)
        resp.raise_for_status()
        data = resp.json()
        if data.get("status") == "success":
            return data["output"][0]
        else:
            return None
    except Exception:
        return None

# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –∏ —Å–æ–æ–±—â–µ–Ω–∏–π ---

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    # –£–≤–µ–¥–æ–º–∏—Ç—å –∞–¥–º–∏–Ω–∞, –µ—Å–ª–∏ –Ω–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç —Å –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é Gemini 2.0 –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–µ–π –∫–∞—Ä—Ç–∏–Ω–æ–∫.\n"
        "–ù–∞–ø–∏—à–∏ –ª—é–±–æ–π —Ç–µ–∫—Å—Ç, —á—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –∏–ª–∏ /img <—Ç–µ–∫—Å—Ç> –¥–ª—è –∫–∞—Ä—Ç–∏–Ω–∫–∏.\n\n"
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - —Å—Ç–∞—Ä—Ç\n"
        "/history - –∏—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤\n"
        "/set_ad <—Ç–µ–∫—Å—Ç> - —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ä–µ–∫–ª–∞–º—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)\n"
        "/img <—Ç–µ–∫—Å—Ç> - —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É"
    )
    if context.application.bot_data.get("users") is None:
        context.application.bot_data["users"] = set()
    if user.id not in context.application.bot_data["users"]:
        context.application.bot_data["users"].add(user.id)
        await context.bot.send_message(ADMIN_ID, f"–ù–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: {user.full_name} (id={user.id})")

async def set_ad(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if update.effective_user.id != ADMIN_ID:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –ø—Ä–∞–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É.")
        return
    ad_text = ' '.join(context.args)
    context.application.bot_data['ad'] = ad_text
    await update.message.reply_text("–†–µ–∫–ª–∞–º–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞!")

async def history(update: Update, context: ContextTypes.DEFAULT_TYPE):
    hist = context.user_data.get("history", [])
    if not hist:
        await update.message.reply_text("–ò—Å—Ç–æ—Ä–∏—è –ø—É—Å—Ç–∞.")
        return
    reply = "<b>–¢–≤–æ—è –∏—Å—Ç–æ—Ä–∏—è (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 5):</b>\n"
    for i, pair in enumerate(hist[-5:], 1):
        reply += f"\n<b>{i}. –í–æ–ø—Ä–æ—Å:</b> {pair['–≤–æ–ø—Ä–æ—Å']}\n<b>–û—Ç–≤–µ—Ç:</b> {pair['–æ—Ç–≤–µ—Ç']}\n"
    await update.message.reply_text(reply, parse_mode='HTML')

async def handle_text(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_text = update.message.text
    chat = update.message.chat

    await chat.send_action(action="typing")

    loading_msg = await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –æ—Ç–≤–µ—Ç...")

    answer = generate_gemini_text(user_text)

    ad = context.application.bot_data.get("ad", "<i>–ó–¥–µ—Å—å –º–æ–≥–ª–∞ –±—ã—Ç—å –≤–∞—à–∞ —Ä–µ–∫–ª–∞–º–∞</i>")
    final_text = f"üí° <b>–û—Ç–≤–µ—Ç Gemini:</b>\n\n{answer}\n\n‚Äî\n{ad}"

    if "history" not in context.user_data:
        context.user_data["history"] = []
    context.user_data["history"].append({"–≤–æ–ø—Ä–æ—Å": user_text, "–æ—Ç–≤–µ—Ç": answer})

    await loading_msg.edit_text(final_text, parse_mode='HTML')

async def generate_img(update: Update, context: ContextTypes.DEFAULT_TYPE):
    if len(context.args) == 0:
        await update.message.reply_text("–ù–∞–ø–∏—à–∏ /img <—Ç–µ–∫—Å—Ç>, —á—Ç–æ–±—ã —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ä—Ç–∏–Ω–∫—É.")
        return
    prompt = ' '.join(context.args)

    await update.message.chat.send_action("upload_photo")
    loading_msg = await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–∞—Ä—Ç–∏–Ω–∫—É... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")

    image_url = generate_image(prompt)
    if image_url:
        await loading_msg.delete()
        await update.message.reply_photo(photo=image_url, caption=f"–í–æ—Ç —Ç–≤–æ—è –∫–∞—Ä—Ç–∏–Ω–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å—É: {prompt}")
    else:
        await loading_msg.edit_text("‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---

def main():
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler('start', start))
    app.add_handler(CommandHandler('set_ad', set_ad))
    app.add_handler(CommandHandler('history', history))
    app.add_handler(CommandHandler('img', generate_img))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_text))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
